--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone III" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_WIDTHA=10 LPM_WIDTHB=5 LPM_WIDTHP=15 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_mult 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_padd 2013:10:23:18:05:48:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 75 
SUBDESIGN mult_pnl
( 
	dataa[9..0]	:	input;
	datab[4..0]	:	input;
	result[14..0]	:	output;
) 
VARIABLE
	add11_result[13..0]	:	WIRE;
	add15_result[2..0]	:	WIRE;
	add7_result[16..0]	:	WIRE;
	cs2a[2..0] : carry_sum;
	cs3a[2..0] : carry_sum;
	le4a[11..0] : lcell;
	le5a[11..0] : lcell;
	le6a[10..0] : lcell;
	sft10a[16..0] : soft;
	sft12a[13..0] : soft;
	sft13a[13..0] : soft;
	sft14a[13..0] : soft;
	sft16a[2..0] : soft;
	sft17a[2..0] : soft;
	sft18a[2..0] : soft;
	sft8a[16..0] : soft;
	sft9a[16..0] : soft;
	dataa_node[9..0]	: WIRE;
	datab_node[4..0]	: WIRE;
	final_result_node[14..0]	: WIRE;
	w139w[11..0]	: WIRE;
	w18w[5..0]	: WIRE;
	w223w	: WIRE;
	w236w	: WIRE;
	w333w[16..0]	: WIRE;
	w80w[11..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	add7_result[] = sft8a[].out + sft9a[].out;
	cs2a[].cin = ( ((w18w[4..4] & cs2a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs2a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs2a[].sin = ( ((((((! w18w[5..5]) & w18w[4..4]) & cs2a[1].cout) # ((w18w[5..5] & w18w[4..4]) & (! cs2a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs2a[1].cout)) # ((w18w[5..5] & (! w18w[4..4])) & (! cs2a[1].cout))), ((((((! w18w[3..3]) & w18w[2..2]) & cs2a[0].cout) # ((w18w[3..3] & w18w[2..2]) & (! cs2a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs2a[0].cout)) # ((w18w[3..3] & (! w18w[2..2])) & (! cs2a[0].cout))), w18w[1..1]);
	cs3a[].cin = ( ((w18w[4..4] & cs3a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs3a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs3a[].sin = ( ((((((! w18w[5..5]) & (! w18w[4..4])) & cs3a[1].cout) # (((! w18w[5..5]) & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs3a[1].cout)), ((((((! w18w[3..3]) & (! w18w[2..2])) & cs3a[0].cout) # (((! w18w[3..3]) & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs3a[0].cout)), w18w[0..0]);
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[0].sout) & cs3a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[1].sout) & cs3a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[1].sout)) & cs3a[1].sout)))));
	le6a[].in = ((cs2a[2].sout & ( dataa_node[], B"0")) # (cs3a[2].sout & ( B"0", dataa_node[])));
	sft10a[].in = add7_result[];
	sft12a[].in = ( w236w, ( w223w, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le5a[8..8].out, ( le5a[7..7].out, ( le5a[6..6].out, ( le5a[5..5].out, ( le5a[4..4].out, ( le5a[3..3].out, ( le5a[2..2].out, ( le4a[3..2].out)))))))))))));
	sft13a[].in = ( w236w, ( w236w, ( (! w139w[11..11]), ( le5a[10..10].out, ( le5a[9..9].out, ( le4a[10..10].out, ( le4a[9..9].out, ( le4a[8..8].out, ( le4a[7..7].out, ( le4a[6..6].out, ( le4a[5..5].out, ( le4a[4..4].out, ( w236w, cs2a[1].sout)))))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w236w, ( w223w, w223w));
	sft17a[].in = ( w236w, ( w236w, (! w80w[11..11])));
	sft18a[].in = add15_result[];
	sft8a[].in = ( w223w, ( w223w, ( le6a[10..10].out, ( sft14a[11..11].out, ( sft14a[10..10].out, ( sft14a[9..9].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out))))))))))))))));
	sft9a[].in = ( w236w, ( sft14a[13..13].out, ( sft14a[12..12].out, ( sft18a[2..2].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( sft14a[8..8].out, ( sft14a[7..7].out, ( sft14a[6..6].out, ( sft14a[5..5].out, ( sft14a[4..4].out, ( sft14a[3..3].out, ( sft14a[2..2].out, ( sft14a[1..1].out, ( sft14a[0..0].out, ( w236w, cs2a[0].sout))))))))))))))));
	dataa_node[] = ( dataa[9..0]);
	datab_node[] = ( datab[4..0]);
	final_result_node[] = ( w333w[14..0]);
	result[] = ( final_result_node[14..0]);
	w139w[] = le5a[].out;
	w18w[] = ( B"0", datab_node[]);
	w223w = B"1";
	w236w = B"0";
	w333w[] = ( sft10a[16..15].out, sft10a[14..13].out, sft10a[12..11].out, sft10a[10..9].out, sft10a[8..7].out, sft10a[6..5].out, sft10a[4..3].out, sft10a[2..1].out, sft10a[0..0].out);
	w80w[] = le4a[].out;
END;
--VALID FILE
